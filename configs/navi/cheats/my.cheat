% my

# Sample Snippet
echo "Sample <variable>!"

# Pull multiple git repositories %bash
for repo in dotfiles .emacs.d; do cd ~/$repo && printf '\e[1;32m%s\e[m\n' "${PWD}: $(git status | head -2 | sed ':a; N; $!ba; s/\n/; /g')" && git pull --rebase --autostash; done

# Replace ubuntu apt repository servers to mirror servers %ubuntu %apt
sed -i.bak "s@http://archive.ubuntu.com/ubuntu/@mirror://mirrors.ubuntu.com/mirrors.txt@g" /etc/apt/sources.list

# chocolateyのソースリポジトリを追加する %chocolatey
choco source add --name "name" --source "url"

# Add UTF-8 BOM by sed
sed -b '1s/^\\(\\xef\\xbb\\xbf\\)\\?/\\xef\\xbb\\xbf/' "file"

# Remove UTF-8 BOM by sed
sed -b '1s/^\\(\\xef\\xbb\\xbf\\)//' "file-with-bom"

# Register an additional public key (-f option is required) %ssh
ssh-copy-id -f -i \"<newly_register_key.pub>\" -o \"IdentityFile <already_registered_key.pub>\" <remote_host>

# Enable the local proxy %bash
export http_proxy=http://localhost:8888 && export https_proxy=http://localhost:8888 && export no_proxy=localhost

# Delete a ssh server entry in ~/.ssh/known_hosts %ssh
ssh-keygen -R "<hostname>"

# Fetch emoji list %console %emoji %console
curl "https://unicode.org/Public/emoji/<version>/emoji-test.txt"

# Transfer the directory via ssh %ssh
tar zcf - \"<dir>\" | ssh \"<host>\" tar zxvf -

# Clear bat cache
bat cache --clear

# Clone a custom theme for bat
git clone https://github.com/kai2nenobu/visual-studio-dark-plus.git "$(bat --config-dir)/themes/visual-studio-dark-plus" \
  && bat cache --build

% my, openssl

# Test a SSL handshake
openssl s_client -connect <server>:<port> -showcerts

# Calculate a message digest with HMAC algorithm
openssl dgst -hex -sha256 -hmac "Key of MAC" <files>

% my, mysql

# Connect to MySQL Server
mysql --host "<hostname>" --user "<user>" --password <password> "<database>"

# Execute SQL query
mysql --host "<hostname>" --user "<user>" --password <password> -e "<query>" "<database>"

% my, cmd

# コマンド置換/Command substitution
 @for /f "usebackq tokens=1 delims=" %i in (`<command>`) do <next_command>

# Read a password with mask
 @for /f "usebackq delims=" %i in (`powershell -Command "$p = Read-Host '<prompt=Enter password>' -AsSecureString; $p = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($p); $p = [Runtime.InteropServices.Marshal]::PtrToStringAuto($p); echo $p"`) do @set PASS=%i

# Enable the local proxy %cmd
set "http_proxy=http://localhost:8888" && set "https_proxy=http://localhost:8888" && set "no_proxy=localhost"

% my, git

# List all branches without marker
git branch -a --format="%(refname:short)"

# Checkout to my branch
git checkout <local_branch>

# Newly checkout to a remote branch
git switch -c <remote_branch> origin/<remote_branch>

# Push a branch to remote in the first time
git push -u origin <local_branch>

# List all ignored files
git ls-files --ignored --others --exclude-standard

# List all files which are ignored but tracked
git ls-files --ignored --cached --exclude-standard

# Check files are ignored and where exclude rule sources are
git check-ignore --verbose <git_files>

# Delete local branches merged in remote
git branch -vv | grep ': gone]'|  grep -v "\*" | awk '{ print $1; }' | xargs -r git branch -d

# Delete local branches merged in remote (in powershell)
git branch -vv | ? { $_ -match ': gone' } | % { ($_ -split '\s+')[1] } | % { git branch -d $_ }

# Show diff for merge commit
git show -m <merge_commits>

# Reset and normalize end of lines in a repository
; https://stackoverflow.com/a/50354765
git stash && git rm --cached -r . && git reset --hard && git checkout .

$ local_branch: git branch --format "%(refname:short)"
$ remote_branch: git branch -r --format "%(refname:lstrip=3)"
$ merge_commits: git rev-list --merges --abbrev-commit HEAD --- --preview "git show {}"
$ git_files: git ls-files --- --multi

% my, ansible

# Apply a single module
ansible -i <hosts_file> <target> -m <module> -a <module_arguments>

# Apply a playbook
ansible-playbook -i <hosts_file> <playbook>

# Check a syatax for playbook
ansible-playbook --syntax-check <playbook>

# List installed collections
ansible-galaxy collection list -p <collection_path>

% my, mozc, fcitx

# Open fcitx configuration
fcitx-config-gtk3

# Open the config dialog for mozc
/usr/lib/mozc/mozc_tool --mode=config_dialog

# Open the dictionary tool for mozc
/usr/lib/mozc/mozc_tool --mode=config_dialog

% my, windows

# Restart explorer
taskkill /f /IM explorer.exe && start explorer.exe

% my, ps, powershell

# Show security protocol (SSL/TLS)
[Net.ServicePointManager]::SecurityProtocol

# Allow only restricted security protocol (SSL/TLS)
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12

# Sync machine time with NICT API (in JST)
Set-Date ([datetime]'1970/01/01 09:00:00').AddSeconds((Invoke-RestMethod -Uri https://ntp-a1.nict.go.jp/cgi-bin/json).st)

# Pull multiple git repositories
foreach ($repo in <repos="dotfiles",".emacs.d">) { cd "~/$repo"; Write-Host "${PWD}: $(git status | Select-Object -First 2 | Join-String -Separator ': ')" -ForegroundColor Green; git pull --rebase --autostash }

# Select the first item like head command
Select-Object -First 1

# Select the first column like cut command
 % { ($_ -split '\s+')[0] }

# foreach loop for piped objects
 % { <command> $_ }

# filter piped objects
? { <command> $_ }

# Enable the local proxy %powershell
 $env:http_proxy = 'http://localhost:8888'; $env:https_proxy = 'http://localhost:8888'; $env:no_proxy = 'localhost'; [System.Net.WebRequest]::DefaultWebProxy = New-Object System.Net.WebProxy('http://localhost:8888')

# Repair ownership of a folder recursively as a current user in Windows
takeown /S (Hostname) /U ([System.Security.Principal.WindowsIdentity]::GetCurrent().Name) /R /F "<directory>"

# Local Variables:
# mode: sh
# End:
