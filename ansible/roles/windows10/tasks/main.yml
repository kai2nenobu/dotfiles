- name: 環境変数を設定する
  tags: [config]
  win_environment:
    level: user
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - name: "EDITOR"
      value: '{{ ansible_facts.env.USERPROFILE }}\utils\wsl-emacsclient.bat'
    - {
        name: "FZF_DEFAULT_OPTS",
        value: '--exact --reverse --inline-info --bind "ctrl-k:kill-line,ctrl-m:accept,ctrl-v:page-down,alt-v:page-up"',
      }
    - name: GIT_SSH
      value: '{{ ansible_facts.env.windir }}\system32\OpenSSH\ssh.exe'
    - { name: "HOME", value: "{{ ansible_facts.env.USERPROFILE }}" }
    - { name: "LANG", value: "ja_JP.UTF-8" }
    - { name: "MSYS", value: "winsymlinks:nativestrict" }
    - { name: "MSYS2_PATH_TYPE", value: "inherit" }
    - { name: "VAGRANT_DEFAULT_PROVIDER", value: "hyperv" }
    - {
        name: "MY_CMDER_CONFIG",
        value: "{{ ansible_facts.env.USERPROFILE }}\\.cmder\\config",
      }
    # ref. https://devblogs.microsoft.com/commandline/share-environment-vars-between-wsl-and-windows/
    - { name: "WSLENV", value: "USERPROFILE/p:http_proxy:https_proxy:no_proxy" }
- name: Windows OS設定
  tags: [config]
  include_tasks: windows_config.yml
- name: IEのお気に入りバー設定変数の読み込み
  include_vars:
    dir: favorite_links
    extensions: [yaml, yml]
    name: favorite_links
- name: IEのお気に入りバー設定
  win_shortcut:
    src: "{{ item.url }}"
    dest: '%USERPROFILE%\Favorites\Links\{{ item.name }}.url'
  loop: "{{ favorite_links | dict2items | map(attribute='value') | flatten }}"
- name: 設定ファイルのシンボリックリンクをはる
  tags: [config]
  include_tasks: link_config_file.yml
  loop:
    # src: dotfilesからの相対パス
    # dest: %USERPROFILE% からの相対パス
    - { src: ".bash_aliases", dest: ".bash_aliases" }
    - { src: ".bashrc", dest: ".bashrc" }
    - { src: ".profile", dest: ".profile" }
    - { src: ".profile", dest: ".zprofile" }
    - { src: ".tmux.conf", dest: ".tmux.conf" }
    - { src: ".zsh_aliases", dest: ".zsh_aliases" }
    - { src: ".zshrc", dest: ".zshrc" }
    - { src: "dot.ahk", dest: "dot.ahk" }
    - { src: "dot.nodoka", dest: "dot.nodoka" }
    - { src: 'pet\snippet.toml', dest: 'AppData\Roaming\pet\snippet.toml' }
  loop_control:
    loop_var: config_file
- name: ssh-agentサービスを有効にする
  tags: [service]
  win_service:
    name: ssh-agent
    start_mode: delayed
    state: started
- name: OpenSSHサーバのサービスを確実に削除する
  tags: [service]
  win_service:
    name: "{{ item }}"
    state: absent
    dependency_action: remove
  with_items:
    - sshproxy
    - sshbroker
- name: clink_inputrcをコピーする
  # シンボリックリンクが動作しないので仕方ないがコピーですます
  # ref. https://github.com/mridgers/clink/issues/461
  tags: [config]
  win_copy:
    src: '%USERPROFILE%\dotfiles\clink_inputrc'
    dest: '%USERPROFILE%\clink_inputrc'
    remote_src: True
- name: ローカルツールディレクトリを作成する
  tags: [config]
  win_file:
    path: '%USERPROFILE%\.local\bin'
    state: directory
- name: ローカルツールディレクトリにパスを通す
  tags: [config]
  win_path:
    scope: user
    elements: '%USERPROFILE%\.local\bin'
    state: present
- name: 設定ディレクトリのシンボリックリンクをはる
  tags: [config]
  include_tasks: link_config_dir.yml
  with_items:
    - { src: ".zsh.d", dest: ".zsh.d" }
    - { src: "utils", dest: "utils" }
  loop_control:
    loop_var: config_dir
- name: utilsディレクトリのパスを通す
  tags: [config]
  win_path:
    scope: user
    elements:
      - '%USERPROFILE%\utils'
    state: present
- name: Install PowerShell Community Extensions
  tags: [package,never]
  win_psmodule:
    name: Pscx
    state: present
    allow_clobber: yes
- name: Chocolateyパッケージをインストールする (chocolatey.org)
  tags: [package]
  win_chocolatey:
    name:
      - 1password4
      - 7zip
      - adoptopenjdk
      - adoptopenjdk11
      - adoptopenjdk8
      - autohotkey.portable
      - cmdermini
      - emacs
      - Firefox
      - fzf
      - git
#      - GoogleChrome
#      - GoogleJapaneseInput
      - gradle
      - graphviz
      - jq
      - lxrunoffline
      - peco
      - sakuraeditor
      - sourcetree
      - Sudo
      - vcxsrv
      - vscode
      - winmerge
      - zoomit
    state: latest
- name: Chocolateyパッケージをインストールする (kai2nenobu)
  tags: [package]
  win_chocolatey:
    name:
      - a5m2
      - cmigemo
      - ghq
      - mozc-emacs-helper
      - nkf
      - pet
      - ssh-agent-wsl
    source: https://www.myget.org/F/kai2nenobu
    state: latest
- name: Chocolateyパッケージをインストールする（依存除く）
  tags: [package]
  # 依存パッケージを一緒にインストールすると問題があるパッケージたちは
  # 別途インストールする。
  win_chocolatey:
    name:
      - plantuml
      - spring-boot-cli
    state: latest
    ignore_dependencies: true
- name: connect.exeをOpenSSHフォルダにコピーする
  ## connect.exeをパスに通すため
  tags: [misc]
  win_copy:
    src: 'C:\Program Files\Git\mingw64\bin\connect.exe'
    dest: 'C:\Windows\System32\OpenSSH\connect.exe'
    remote_src: yes
- name: 自動起動スクリプトを作成する
  tags: [startup]
  vars:
    startup_folder: '%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup'
  win_shortcut: "{{item}}"
  with_items:
    - description: VcXsrvを起動する
      src: 'C:\Program Files\VcXsrv\vcxsrv.exe'
      args: "-multiwindow"
      dest: '{{ startup_folder }}\Auto Start VcXsrv.lnk'
    - description: ユーザAHKスクリプトを起動する
      src: '%ChocolateyInstall%\bin\AutoHotkey.exe'
      args: '%USERPROFILE%\dot.ahk'
      dest: '{{ startup_folder }}\User AHK.lnk'
## TODO: Cmderを /C オプション付きで起動するショートカット or タスクバーアイコンを
##   作成するタスクが必要。
- name: Cmderのユーザ個別設定ディレクトリを作成する
  # ref. https://github.com/cmderdev/cmder/blob/master/README.md#shared-cmder-install-with-non-portable-individual-user-config
  tags: [config, cmder]
  win_file:
    path: "%MY_CMDER_CONFIG%"
    state: directory
- name: Cmderの設定をコピーする
  tags: [config, cmder]
  win_copy:
    src: '%USERPROFILE%\dotfiles\cmder\{{ item }}'
    dest: '%MY_CMDER_CONFIG%\{{ item }}'
    remote_src: True
  with_items:
    - prompt.lua
    - settings
    - user-ConEmu.xml
    - user_aliases.cmd
    - user_profile.cmd
- name: よく使うアプリをタスクバーにピン留めする
  tags: [config]
  import_tasks: pin_to_taskbar.yml
  vars:
    # ピン留めするアプリケーション一覧
    apps:
      - name: Cmder
        src: 'C:\tools\cmdermini\Cmder.exe'
        arguments: '/C "%USERPROFILE%\.cmder"'
        description: ユーザ個別設定のCmderを開く
        #appid: 'Maximus5.ConEmu.b482823ea988e12ffc028ea2e346a6f9'
      - name: Firefox
        src: 'C:\Program Files\Mozilla Firefox\firefox.exe'
      - name: Outlook 2016
        src: 'C:\Program Files (x86)\Microsoft Office\root\Office16\OUTLOOK.EXE'
        description: 電子メール、スケジュール、連絡先、タスクを管理します。
      - name: エクスプローラー
        src: 'C:\Windows\explorer.exe'
        description: コンピューターのファイルやフォルダーを表示します。
      - name: Emacs on WSL
        src: "cmd.exe"
        arguments: '/c "%USERPROFILE%\utils\wsl-emacs.bat"'
        directory: "%USERPROFILE"
        icon: '%ChocolateyInstall%\lib\Emacs\tools\emacs\bin\emacs.exe'
        description: WSL上のEmacsを起動します。
        #appid: 'The VcXsrv Project.VcXsrv.Emacs.(null)'
      - name: Google Chrome
        src: 'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
      - name: Internet Explorer
        src: 'C:\Program Files\internet explorer\iexplore.exe'
      - name: リモート デスクトップ接続
        src: '%windir%\system32\mstsc.exe'
        description: お使いのコンピューターから別の場所にあるコンピューターに接続して、プログラムを実行したりファイルにアクセスしたりできます。
      - name: Emacs
        src: '%ChocolateyInstall%\lib\Emacs\tools\emacs\bin\runemacs.exe'
        arguments: "-r"
        directory: "%USERPROFILE%"
        description: Emacsを起動します。
        #appid: 'GNU.Emacs'
      - name: Sourcetree
        src: 'C:\Program Files (x86)\Atlassian\Sourcetree\SourceTree.exe'
- name: 「Emacsで開く」をコンテキストメニューに追加する
  tags: [registry]
  import_tasks: emacs_context_menu.yml
- name: playbook適用日時を保存する
  win_copy:
    dest: C:\ansible_applied.txt
    content: "{{ ansible_facts.date_time.iso8601 }}"
